import streamlit as st
import folium
import locale
from modules.functions_ml import read_data


def folium_function():

    df = read_data()
    df_map = df.copy()
    # Configurar la localización para formatear los precios
    locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')

    # Coordenadas de Sydney
    sydney_coords = [-33.8688, 151.2093]

    # Crear un mapa
    m = folium.Map(location=sydney_coords, zoom_start=11)

    # Agregar marcadores para los códigos postales y sus tipos de viviendas
    data = [
        (2000, -33.865473239760576, 151.20862935056616),
        (2007, -33.880286669353765, 151.19794806423673),
        (2008, -33.888319477090924, 151.19667099985654),
        (2009, -33.86829024329728, 151.1929051240161),
        (2010, -33.8826046133088, 151.21495566655207),
        (2011, -33.86725656642501, 151.22623860615136),
        (2015, -33.90806958281357, 151.19307576055238),
        (2016, -33.893123412937186, 151.20677987482887),
        (2017, -33.90300822697425, 151.20783824592414),
        (2018, -33.92492712491022, 151.20870803251475),
        (2019, -33.95487220146769, 151.2071449619276),
        (2020, -33.95809303127994, 151.18334105877764),
        (2021, -33.89297506502908, 151.22823764630155),
        (2022, -33.8958387517546, 151.24917678138306),
        (2023, -33.88085642116584, 151.2556219985718),
        (2024, -33.90325516490838, 151.26141457848772),
        (2025, -33.88692258001938, 151.24378964900097),
        (2026, -33.88966077055115, 151.27231675892997),
        (2027, -33.86936733219126, 151.24319167292865),
        (2028, -33.87629000010496, 151.24397278357597),
        (2029, -33.872403366665715, 151.26738947580176),
        (2030, -33.852851404316795, 151.2736992428524),
        (2031, -33.91502546922788, 151.2444277350132),
        (2032, -33.925843750599086, 151.22833247227837),
        (2033, -33.9132715293846, 151.2210831683249),
        (2034, -33.924510565871365, 151.25462097973036),
        (2035, -33.942400250609666, 151.23717754208687),
        (2036, -33.97542536043725, 151.23326300633317),
        (2037, -33.878048466881495, 151.18520615759502),
        (2038, -33.880641474260685, 151.17144272503253),
        (2039, -33.86507763687729, 151.17439313027626),
        (2040, -33.876376238670396, 151.15757179209422),
        (2041, -33.85469426628783, 151.18365875420227),
        (2042, -33.89889936503372, 151.17753176751842),
        (2043, -33.902576627734256, 151.1857207769548),
        (2044, -33.91986018738324, 151.16913578348812),
        (2045, -33.87780218844152, 151.14009179907808),
        (2046, -33.85956647975583, 151.1328697180819),
        (2047, -33.85091345207435, 151.15706897394742),
        (2048, -33.89306900904342, 151.16604886051618),
        (2049, -33.894776700197994, 151.1522896350265),
        (2050, -33.888448018610305, 151.18179758454764),
        (2060, -33.841346147483286, 151.2039377847447),
        (2061, -33.84968404188506, 151.21669633323248),
        (2062, -33.821979773787476, 151.21484541206908),
        (2063, -33.810748016953546, 151.2201121459399),
        (2064, -33.81097072658147, 151.1860542784512),
        (2065, -33.827351375133986, 151.19348719202014),
        (2066, -33.818457399352944, 151.162345198605),
        (2067, -33.79619723800017, 151.177795350624),
        (2068, -33.79948519099703, 151.21048564923842),
        (2069, -33.783118883016634, 151.19796494251935),
        (2070, -33.77611241789607, 151.17005723115344),
        (2071, -33.762890266946926, 151.1669207176161),
        (2072, -33.75563615707206, 151.15345924173852),
        (2073, -33.75169859078396, 151.13660855767424),
        (2074, -33.711371763119026, 151.13879899001034),
        (2075, -33.72084471666224, 151.17080910727123),
        (2076, -33.716174503886826, 151.11599845123231),
        (2077, -33.67927769318082, 151.10156077319533),
        (2079, -33.66679485712747, 151.12809308667428),
        (2080, -33.64664809061869, 151.1365186267524),
        (2081, -33.629133032610405, 151.15205991374188),
        (2082, -33.60266976934251, 151.1213972187365),
        (2083, -33.55897342911382, 151.20540221472282),
        (2084, -33.64368830879121, 151.2302347255169),
        (2085, -33.72456890079927, 151.20794916274158),
        (2086, -33.74820467493022, 151.22439815794283),
        (2087, -33.76731925105566, 151.2162514785655),
        (2088, -33.83452805306043, 151.24821842982112),
        (2089, -33.837852604264235, 151.21968401999177),
        (2090, -33.83224857409349, 151.2272500248796),
        (2092, -33.79342784370696, 151.2406844372212),
        (2093, -33.79938707378113, 151.26241444885721),
        (2094, -33.79473497833899, 151.2737133791776),
        (2095, -33.80969171145096, 151.28822803153403),
        (2096, -33.77481132723453, 151.28612374092387),
        (2097, -33.73414365783818, 151.29438947257304),
        (2099, -33.743448907013494, 151.27837404662253),
        (2100, -33.75281487927523, 151.2528797206117),
        (2101, -33.69806774268193, 151.26756102613973),
        (2102, -33.688777682671095, 151.2954480091351),
        (2103, -33.675886459203376, 151.30343210367045),
        (2104, -33.66194151403554, 151.2899323866835),
        (2105, -33.62417037143925, 151.30054147712372),
        (2106, -33.656525681419105, 151.31528093107278),
        (2107, -33.62361350150566, 151.3247308030272),
        (2108, -33.59556102359164, 151.2985321455492),
        (2110, -33.83365086771558, 151.15324034165113),
        (2111, -33.83217338269335, 151.12823424535785),
        (2112, -33.81329258983396, 151.1094025694937),
        (2113, -33.78980946136995, 151.12905942317573),
        (2114, -33.80789584700487, 151.08353240178843),
        (2115, -33.811959207681305, 151.06044163439157),
        (2116, -33.81271856067758, 151.04095073367904),
        (2117, -33.7959685267006, 151.04013078469995),
        (2118, -33.77564439349662, 151.04531868169246),
        (2119, -33.754145950746654, 151.06581512881084),
        (2120, -33.72700058503333, 151.07557115739354),
        (2121, -33.76930436333439, 151.08071641415796),
        (2122, -33.78325785064196, 151.0927953381251),
        (2125, -33.74831448977509, 151.03364280977198),
        (2126, -33.72184761747576, 151.04624407112178),
        (2127, -33.837696428983605, 151.06863832473218),
        (2128, -33.83419876579126, 151.04629281985055),
        (2130, -33.89287785247151, 151.13694826174532),
        (2131, -33.888624943011, 151.12613805175738),
        (2132, -33.88044646582609, 151.11547887969016),
        (2133, -33.897255513755375, 151.10289176870842),
        (2134, -33.878051220649, 151.10381722351897),
        (2135, -33.878503283887774, 151.0817618195715),
        (2136, -33.893862994888885, 151.08263961221402),
        (2137, -33.85365032300778, 151.105444151665),
        (2138, -33.83762262204681, 151.09058601865945),
        (2140, -33.86263335272446, 151.0751130869748),
        (2141, -33.867416851509084, 151.04744238498145),
        (2142, -33.835139822701684, 151.0183390991862),
        (2143, -33.88818093155644, 151.02641391671114),
        (2144, -33.85467827274366, 151.02620833535852),
        (2145, -33.81474775303918, 150.95382650028745),
        (2146, -33.78984717952368, 150.9531041482752),
        (2147, -33.76763473607409, 150.93663499979314),
        (2148, -33.785984753217605, 150.89984226208958),
        (2150, -33.814876662794624, 151.00733262901628),
        (2151, -33.78368016830665, 151.01460076962047),
        (2152, -33.78728659042356, 150.99415260542546),
        (2153, -33.75524659203515, 150.97559080710175),
        (2154, -33.72793602124023, 150.9998892290637),
        (2155, -33.69323088956556, 150.93855295346145),
        (2156, -33.652496532342255, 150.97161347149662),
        (2157, -33.53778034345979, 151.0367183835488),
        (2158, -33.675523812132454, 151.0357680893139),
        (2159, -33.582528968799664, 151.10279975272385),
        (2160, -33.836244984802676, 150.98288353392104),
        (2161, -33.857297640394194, 150.981065354481),
        (2162, -33.88120368408519, 151.00247843078097),
        (2163, -33.887225347946185, 150.97771471570888),
        (2164, -33.84520472960051, 150.91725725085325),
        (2165, -33.870480698647995, 150.94646294615922),
        (2166, -33.89309608821873, 150.93779599162403),
        (2167, -33.9715102154658, 150.8933280885018),
        (2168, -33.91357704167099, 150.87647560229624),
        (2170, -33.93348023298526, 150.9187094515238),
        (2171, -33.9157861881794, 150.84147270604336),
        (2172, -33.96548134256703, 150.9806309731845),
        (2173, -34.06681567521656, 150.91400475240502),
        (2174, -33.96270461878779, 150.8576296029854),
        (2175, -33.84018332092934, 150.84783869499879),
        (2176, -33.87084769589394, 150.88506938686317),
        (2177, -33.892582580757676, 150.88104711367038),
        (2178, -33.87087743202193, 150.80069586361634),
        (2179, -33.95320941803163, 150.80122280090396),
        (2190, -33.90070249758527, 151.05567355517115),
        (2191, -33.90452884309348, 151.08590016816711),
        (2192, -33.91912863551039, 151.0894756992557),
        (2193, -33.90883817234028, 151.1205018088242),
        (2194, -33.91231155640405, 151.102857616049),
        (2195, -33.92104996287575, 151.07295574014736),
        (2196, -33.9305708065955, 151.0607158264776),
        (2197, -33.89928301729081, 150.99629375268105),
        (2198, -33.90901191226752, 150.98803328905043),
        (2199, -33.904635727898366, 151.02016398140475),
        (2200, -33.922162393245465, 151.0146720067129),
        (2203, -33.90408249485105, 151.13954091842817),
        (2204, -33.911159081697086, 151.15546071022064),
        (2205, -33.93685446825118, 151.14768440805696),
        (2206, -33.92487673432033, 151.12600362125173),
        (2207, -33.94738342025217, 151.12104880736243),
        (2208, -33.93934453001277, 151.09930379720387),
        (2209, -33.94732102774146, 151.07715624070352),
        (2210, -33.964186452253394, 151.05161524277113),
        (2211, -33.95675447784195, 151.03254873204887),
        (2212, -33.94999266478518, 151.0141735773964),
        (2213, -33.96251429996401, 150.9993247690686),
        (2214, -33.93891003473282, 150.98166907289098),
        (2216, -33.955175940912746, 151.15241596072443),
        (2217, -33.975201291631514, 151.14537844268884),
        (2218, -33.97119728952648, 151.11967338257415),
        (2219, -33.995667250044136, 151.14028510027626),
        (2220, -33.96498838502149, 151.09935150088185),
        (2221, -33.98881433524747, 151.10595931630672),
        (2222, -33.96393103742312, 151.08612489402998),
        (2223, -33.978990974430815, 151.07291562552737),
        (2224, -34.01206393409324, 151.10328245418535),
        (2225, -34.00262735032595, 151.08165549141142),
        (2226, -34.00951314563749, 151.0621794428417),
        (2227, -34.04280299497198, 151.0864732181593),
        (2228, -34.03788398273178, 151.1029736245358),
        (2229, -34.04301330990448, 151.12354234126354),
        (2230, -34.0622062463879, 151.1464704075587),
        (2231, -34.01683266885141, 151.18643349497847),
        (2232, -34.10306539381797, 151.06824143201993),
        (2233, -34.0886216104429, 150.99272000205602),
        (2234, -34.01644078372252, 151.00761250229485),
        (2261, -33.34043840211997, 151.4720209700424),
        (2550, -36.73274508178662, 149.68592960273847),
        (2555, -33.882016788693875, 150.74520967735384),
        (2556, -33.94328586653468, 150.7244443037809),
        (2557, -33.97553623880726, 150.77253796278956),
        (2558, -34.030822345689856, 150.80503529481538),
        (2559, -34.05004337559737, 150.79832605223748),
        (2560, -34.22617840216218, 150.81784702390127),
        (2563, -34.101273690643545, 150.75665509991782),
        (2564, -33.996124280849486, 150.89370273346205),
        (2565, -33.99083623226084, 150.8497773488338),
        (2566, -34.022337732742045, 150.83990276377975),
        (2567, -34.04630517940557, 150.750837690383),
        (2568, -34.137568983716115, 150.72107320880718),
        (2569, -34.18834622238793, 150.71245448062518),
        (2570, -34.051942664624974, 150.5898491921262),
        (2571, -34.22760310681738, 150.6335800145065),
        (2572, -34.19130508090781, 150.51382684301245),
        (2573, -34.229368248485926, 150.59076833476044),
        (2574, -34.38984723304053, 150.6527421526561),
        (2745, -33.862902747461845, 150.66660527290534),
        (2750, -33.752429274881784, 150.67859666536086),
        (2753, -33.61668901652658, 150.6937492258179),
        (2756, -33.30046551750993, 150.76355217694518),
        (2760, -33.75649301639329, 150.7799115521548),
        (2761, -33.7392360627198, 150.8483769677374),
        (2765, -33.65235722732951, 150.85710814166313),
        (2768, -33.72773087611589, 150.92997280810164),
        (2769, -33.705460851113536, 150.9054954569327),
        (2770, -33.756200629281004, 150.81394201954),
        (2777, -33.69174686169167, 150.60707754612673),
        (3029, -37.827964286015586, 144.6964625299491),
        (3057, -37.768878184758016, 144.97742618802593),
        (3331, -37.98567183741493, 144.18275087425482),
        (3350, -37.571370908862804, 143.8609558030087),
        (4210, -27.913341752815107, 153.2555591362115),
        (4212, -27.88787655354179, 153.34660661272758),
        (4216, -27.830647182230244, 153.39909837731327),
        (4217, -27.998944258926656, 153.40852724480717),
        (4570, -26.169403721225912, 152.59713808147993),
        (4878, -16.842633229683873, 145.70879692421047),
        ]

    color_dict = {
        'house': 'lightblue',
        'townhouse': 'pink',
        'duplex/semi-detached': 'blue',
        'villa': 'darkgreen',
        'terrace': 'red',
        'warehouse': 'green',
    }

    show_filters = st.checkbox("Mostrar/Ocultar Filtros")
    if show_filters:
        col1, col2, col3 = st.columns([1,5,1])
        
            # Contenido de la primera columna
        with col1:
            # Year
            year_options = ["All"] + list(df["Year"].unique())
            year = st.selectbox(label = "Year",
                                        options = year_options)

            df_map = df_map[df_map["Year"] == year] if year != "All" else df_map

        
            
            # Season
            season_options = ["All"] + list(df_map["Season"].unique())
            season = st.selectbox(label = "Season",
                                        options = season_options)
            
            df_map = df_map[df_map["Season"] == season] if season != "All" else df_map

            
            
            #propType

            propType_options = ["All"] + list(df_map["propType"].unique())
            
            propType = st.selectbox(label= "Type", 
                                            options=propType_options)
            
            df_map = df_map[df_map["propType"] == propType] if propType != "All" else df_map

        with col3:   
            col4, col5 = st.columns(([2,1]))

            with col4:
            # Bed
                bed_options = list(df_map["bed"].unique())

                bed = st.number_input(label = "Bedroom",
                                    min_value = 1,
                                    max_value = max(bed_options),
                                    value = 1,
                                    step = 1)
                # Bath

                bath_options = list(df_map["bath"].unique())

                bath = st.number_input(label = "Bathroom",
                                    min_value = 1,
                                    max_value = max(bath_options),
                                    value = 1,
                                    step = 1)
                
               
                
                #Car
                car_options = list(df_map["car"].unique())
                car = st.number_input(label     = "Space car",
                                min_value = 1,
                                max_value = 31,
                                value     = 1)
                
                

            with col5:
                signs_bed_mapping = {"<=": "<=", "==": "==", "=>": ">="}
                signs_bed = st.select_slider(label="",
                                            options=["<=", "==", "=>"],
                                            value="==")
                sign_bed_operator = signs_bed_mapping[signs_bed]

                

                # Obtener el signo seleccionado por el usuario para la columna 'bath'
                signs_bath_mapping = {"<=": "<=", "==": "==", "=>": ">="}
                signs_bath = st.select_slider(label=" ",
                                            options=["<=", "==", "=>"],
                                            value="==")
                sign_bath_operator = signs_bath_mapping[signs_bath]

                df_map = df_map[(eval(f"df_map['bed'] {sign_bed_operator} bed")) & (eval(f"df_map['bath'] {sign_bath_operator} bath"))]

    
                #car
                signs_car_mapping = {"<=": "<=", "==": "==", "=>": ">="}
                signs_car = st.select_slider(label="  ",
                                            options=["<=", "==", "=>"],
                                            value="==")
                
                sign_car_operator = signs_car_mapping[signs_car]
                df_map = df_map[(eval(f"df_map['car'] {sign_car_operator} car"))]
        with col2:
            # Crear un diccionario para realizar un seguimiento de los tipos de vivienda ya mostrados
            tipo_vivienda_mostrado = {}

            # Crear un diccionario para calcular el precio medio por tipo de vivienda y código postal
            precio_medio_dict = {}

            
            # Iterar a través de las filas y agregar marcadores al mapa
            for item in data:
                codigo_postal = item[0]
                tipos_viviendas = df_map[df_map['postalCode'] == codigo_postal]['propType'].tolist()
                precios = df_map[df_map['postalCode'] == codigo_postal]['sellPrice']
                
                if tipos_viviendas:
                # Calcular el precio medio por tipo de vivienda
                    precio_medio_por_tipo = precios.groupby(tipos_viviendas).mean()
                    precio_medio_dict[codigo_postal] = precio_medio_por_tipo
                    
                    # Crear un objeto FeatureGroup para agrupar los marcadores debajo de cada código postal
                    code_group = folium.FeatureGroup(name=str(codigo_postal))
                    
                    # Agregar el precio medio al texto del marcador
                    popup_text = f'CP: {codigo_postal}<br>Precio Medio:<br>'
                    
                    # Iterar por los tipos de vivienda en esta ubicación
                    for tipo_vivienda in tipos_viviendas:
                        # Verificar si ya hemos mostrado un marcador para este tipo de vivienda en este código postal
                        if tipo_vivienda not in tipo_vivienda_mostrado.get(codigo_postal, []):
                            # Agregar el tipo de vivienda y su precio medio al texto del marcador
                            precio_medio = precio_medio_por_tipo.get(tipo_vivienda, 0)
                            # Formatear el precio para que sea más simple de leer
                            precio_formateado = locale.format_string('%.2f', precio_medio, grouping=True)
                            popup_text += f'{tipo_vivienda}: ${precio_formateado}<br>'
                            
                            # Registrar que hemos mostrado este tipo de vivienda en este código postal
                            tipo_vivienda_mostrado.setdefault(codigo_postal, []).append(tipo_vivienda)
                    
                    # Agregar un marcador al grupo con el color correspondiente
                    folium.Marker(
                        location=[item[1], item[2]],
                        popup=popup_text,
                        icon=folium.Icon(color=color_dict.get(tipos_viviendas[0], 'blue'))
                    ).add_to(code_group)
                    
                    # Agregar el grupo de códigos postales al mapa
                    code_group.add_to(m)

            # Agregar control de capas al mapa para mostrar/ocultar los grupos
            folium.LayerControl().add_to(m)
            st.write("Mapa Interactivo con Folium:")
            st.write(m)
        
    else:



        # Crear un diccionario para realizar un seguimiento de los tipos de vivienda ya mostrados
        tipo_vivienda_mostrado = {}

        # Crear un diccionario para calcular el precio medio por tipo de vivienda y código postal
        precio_medio_dict = {}

        
        # Iterar a través de las filas y agregar marcadores al mapa
        for item in data:
            codigo_postal = item[0]
            tipos_viviendas = df_map[df_map['postalCode'] == codigo_postal]['propType'].tolist()
            precios = df_map[df_map['postalCode'] == codigo_postal]['sellPrice']
            
            if tipos_viviendas:
            # Calcular el precio medio por tipo de vivienda
                precio_medio_por_tipo = precios.groupby(tipos_viviendas).mean()
                precio_medio_dict[codigo_postal] = precio_medio_por_tipo
                
                # Crear un objeto FeatureGroup para agrupar los marcadores debajo de cada código postal
                code_group = folium.FeatureGroup(name=str(codigo_postal))
                
                # Agregar el precio medio al texto del marcador
                popup_text = f'CP: {codigo_postal}<br>Precio Medio:<br>'
                
                # Iterar por los tipos de vivienda en esta ubicación
                for tipo_vivienda in tipos_viviendas:
                    # Verificar si ya hemos mostrado un marcador para este tipo de vivienda en este código postal
                    if tipo_vivienda not in tipo_vivienda_mostrado.get(codigo_postal, []):
                        # Agregar el tipo de vivienda y su precio medio al texto del marcador
                        precio_medio = precio_medio_por_tipo.get(tipo_vivienda, 0)
                        # Formatear el precio para que sea más simple de leer
                        precio_formateado = locale.format_string('%.2f', precio_medio, grouping=True)
                        popup_text += f'{tipo_vivienda}: ${precio_formateado}<br>'
                        
                        # Registrar que hemos mostrado este tipo de vivienda en este código postal
                        tipo_vivienda_mostrado.setdefault(codigo_postal, []).append(tipo_vivienda)
                
                # Agregar un marcador al grupo con el color correspondiente
                folium.Marker(
                    location=[item[1], item[2]],
                    popup=popup_text,
                    icon=folium.Icon(color=color_dict.get(tipos_viviendas[0], 'blue'))
                ).add_to(code_group)
                
                # Agregar el grupo de códigos postales al mapa
                code_group.add_to(m)

        # Agregar control de capas al mapa para mostrar/ocultar los grupos
        folium.LayerControl().add_to(m)

        # Mostrar el mapa en Streamlit
        st.write("Mapa Interactivo con Folium:")
        st.write(m)


if __name__ == "__folium_page__":

    folium_function()